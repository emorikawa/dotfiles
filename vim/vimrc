" The vimrc file of Evan Morikawa
" evan@evanmorikawa.com
" @e0m
" See https://vimawesome.com/
" See https://statico.github.io/vim3.html

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""" Packages """"""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Simply type :PlugInstall to install everything.

set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

" Helps setup Vim properly "
"""""""""""""""""
Plug 'lambdalisue/vim-pyenv'

" Helps me move "
"""""""""""""""""
" Unload/delete/wipe a buffer, keep its window(s)
Plug 'qpkorr/vim-bufkill'

" Extends % operator to match html tags and others.
Plug 'tmhedberg/matchit'

" unimpaired.vim: pairs of handy bracket mappings
Plug 'tpope/vim-unimpaired'

" A camel-case detecting motion
Plug 'bkad/CamelCaseMotion'

" A command-line fuzzy finder.
" Requires brew install fzf to have been run first
" Plug '/usr/local/opt/fzf'

" New text object at the same indent level
Plug 'michaeljsmith/vim-indent-object'



" Helps me type "
"""""""""""""""""
" Write snippets in vim.
" <tab> after a snippet key
" http://vimcasts.org/episodes/meet-ultisnips/
" Snippets are separated from the engine.
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'

" Black is a Python autoformatter.
" See https://github.com/psf/black
" Plug 'psf/black'

" The Javascript autoformatter
" Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

" Enable repeating supported plugin maps with '.'
Plug 'tpope/vim-repeat'

" Quoting/parenthesizing made simple
Plug 'tpope/vim-surround'

" Easily search for, substitute, & abbreviate multiple variants of a word
" https://github.com/tpope/vim-abolish
" http://vimcasts.org/episodes/enhanced-abbreviations-with-abolish/
Plug 'tpope/vim-abolish'

" Easily comment in and out lines
" <leader>__
Plug 'tomtom/tcomment_vim'

" Automatically complete brackets
Plug 'jiangmiao/auto-pairs'

" The new and hotness for syntax checking and linting. Replaces syntastic
" Plug 'w0rp/ale'

" Easy text exchange operator for Vim
" Mapped to cx
" http://vimcasts.org/episodes/swapping-two-regions-of-text-with-exchange-vim/
" Plug 'tommcdo/vim-exchange'

" Vim motions on speed. Replaces the <number> in <number><motion>
" <leader><leader><motion>
Plug 'Lokaltog/vim-easymotion'

" True Sublime Text style multiple selections for Vim
" Mapped to C-n
Plug 'terryma/vim-multiple-cursors'

" A parser for a condensed HTML format
" <c-e> after a block of sparkup-formatted pre-html
" Plug 'rstacruz/sparkup', {'rtp': 'vim/'}

" Sort python packages
" Plug 'fisadev/vim-isort'

" Vim Go
" Plug 'fatih/vim-go'
" let g:go_metalinter_autosave = 1

" Awesome autocomplete
" http://valloric.github.io/YouCompleteMe/
" IMPORTANT: You must go to ~/.vim/plugged/YouCompleteMe and run ./install.py
" You may need to do a `brew install cmake` first.
" Plug 'Valloric/YouCompleteMe'


" Helps me see "
""""""""""""""""
" JSX files. React JSX
" Plug 'mxw/vim-jsx'

" HAML, SASS, SCSS support for Vim
" Plug 'tpope/vim-haml'

" Lean & mean status/tabline for vim that's light as air
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" CJSX files. Coffeescript with React JSX
" Plug 'mtscout6/vim-cjsx'

" Markdown syntax for vim
Plug 'tpope/vim-markdown'

" Less syntax support
" Plug 'groenewege/vim-less'

" Scala support
" Plug 'derekwyatt/vim-scala'

" Colors CSS tags with the appropriate color.
" NOTE: As of 2018-07-13 this dramatically slows down loading of html files. Disabled
" Plug 'skammer/vim-css-color'

" Add CSS3 syntax support to vim's built-in `syntax/css.vim`
" Plug 'hail2u/vim-css3-syntax'

" Javascript & ES6 support for vim
" Plug 'othree/yajs.vim'
" Plug 'othree/es.next.syntax.vim'

" CoffeeScript support for vim
" Plug 'kchmck/vim-coffee-script'

" Typescript support"
" Plug 'leafgarland/typescript-vim'

" Shows indent level
Plug 'nathanaelkane/vim-indent-guides'

" Solarized theme (only used for light-mode)
" Use `evan` theme for dark mode
" Plug 'altercation/vim-colors-solarized'

" Terraform plugin
" See https://github.com/hashivim/vim-terraform
Plug 'hashivim/vim-terraform'
let g:terraform_fmt_on_save=0


" Helps my workflow "
"""""""""""""""""""""
" Ruby on Rails power tools
" Plug 'tpope/vim-rails'

" Run Rspec specs from Vim
" Plug 'thoughtbot/vim-rspec'


" Helps me search "
"""""""""""""""""""
" A nice interface to searching via ack (now replaced by ag the silver
" searcher). Completely replaces grep
" Plug 'mileszs/ack.vim'


" Helps me collaborate "
""""""""""""""""""""""""
" A Git wrapper so awesome, it should be illegal
" Plug 'tpope/vim-fugitive'
" Needed by Fugitive to open on GitHub.com
" Plug 'tpope/vim-rhubarb'

" Helps me track my work "
""""""""""""""""""""""""""
" Awesome time/productivity tracker.
" Plug 'wakatime/vim-wakatime'

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""" KEY MAPPINGS """"""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keymappings are ordered first by frequency of use.

let mapleader = ","

" Quick escaping
inoremap jk <Esc>
inoremap kj <Esc>
cnoremap jk <Esc>
cnoremap kj <Esc>

" Quick saving
noremap df :w<CR>
noremap fd :w<CR>
inoremap df <Esc>:w<CR>
inoremap fd <Esc>:w<CR>

" Easier movement around the page
noremap 0 ^
noremap k gk
noremap j gj
noremap <End> $
noremap <Home> 0

" Note, cmd-shift-j does line concatenation.
noremap <S-j> 3j
noremap <S-k> 3k
noremap <S-l> 5l
noremap <S-h> 5h

noremap <C-j> 3<C-e>
noremap <C-k> 3<C-y>
noremap <PageUp> <c-u>
noremap <PageDown> <c-d>

" Unix line shell navigation
cnoremap <C-p> <Up>
inoremap <C-e> <End>
cnoremap <C-e> <End>
cnoremap <C-n> <Down>
inoremap <C-a> <Home>
cnoremap <C-a> <Home>
cnoremap <C-k> <C-U>
inoremap <C-k> <esc>C

" Move lines up or down via 'alt/option/⌥ key + j/k'
" http://vim.wikia.com/wiki/Moving_lines_up_or_down
" On Mac you can't do <A-j> or <A-k>. Instead you use the hack below:
" alt-key fix: http://stackoverflow.com/a/15399297/793472
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" And by lowercase everything I mean undo
noremap U u
vnoremap U <Esc>u

" Use null buffer with change command
noremap c "_c

"" bubble single lines
nnoremap <C-Up> [e
nnoremap <C-Down> ]e

"" bubble multiple lines
vnoremap <C-Up> [egv
vnoremap <C-Down> ]egv

" Move between buffers
noremap <c-h> <c-w>h
noremap <c-l> <c-w>l

" Quick quoting. Uses tpope/vim-surround
nnoremap <leader>" ysiw"e
nnoremap <leader>' ysiw'e

nnoremap <leader>j :join<CR>

" A new motion that selects in the next or prev set of parenthesis
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>

""""" AWESOME SEARCHING
" Fuzzy finding via fzf
" nnoremap <C-p> :FZF<CR>
" Jumping to tags.
" NOTE This must have ctags enabled for the project
" By default <C-]> will jump into a tag.
" This requires FZF in installed with utility fn below
" nnoremap <C-T> :Tags<CR>
" nnoremap <Leader>t :BTags<CR>

"In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>n<S-n>
vnoremap <silent> # :call VisualSearch('b')<CR>n<S-n>
vnoremap <silent> <C-f> :call VisualSearch('f')<CR>n<S-n>
vnoremap <silent> <D-F> :call VisualSearch('f')<CR>n<S-n>ygn:Ack <C-r>"<CR>
vnoremap <silent> <Leader>f :call VisualSearch('f')<CR>n<S-n>ygn:Ack <C-r>"<CR>

" Search and highlight what's under the cursor. Also automatically copies
" the word to both yank and the mac paste buffer thanks to
" clipboard=unnamed
nnoremap <C-f> yiw:Subvert/<C-r>"<CR><S-n>

" Search via grep what's under the cursor.
" nnoremap <D-F> *<S-n>ye:Ack <C-r>"<CR>
" nnoremap <Leader>f *<S-n>ye:Ack <C-r>"<CR>

" Unhighlight
noremap <space> :nohl<CR>

" Space bar searching via Subvert
" Part of Tim Pope's Abolish plugin
" http://vimcasts.org/episodes/smart-search-with-subvert/
noremap / :Subvert/

noremap <S-Space> :Ack 
noremap <Leader><Space> :Ack 

""""" FILE MANAGEMENT
" Close buffer but keep split open
" Uses bufkill.vim
noremap <C-Q> :BD<CR>

" Close buffer
noremap <C-c> :bd<CR>

" Rename the file. We do this via the git plugin. This only works in git
" directories.
nnoremap <Leader>r :call RenameFile()<cr>

" Delete the buffer from disk and close the buffer
" Uses bufkill.vim
nnoremap <Leader>dd :call delete(expand('%'))<CR>:BD<CR>

" Create (or edit) another file in the same directory as the current file
nnoremap <Leader>e :e <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>

" Load scratchpad file
nnoremap <leader>sp :e ~/.scratchpad.sh<CR>


""""" GIT COMMANDS
" noremap gd :Gdiff<CR>
" noremap ga :Gwrite<CR>
" noremap gb :Gbrowse<CR>
" noremap gs :Gstatus<CR>
" noremap gc :Gcommit -a<CR>
" noremap gl :Gdiff HEAD~1<CR>

"Reselect visual block after indent/outdent
" vnoremap < <gv
" vnoremap > >gv

" Edit Vimrc
" $MYVIMRC points to the ~/.vimrc file
nnoremap <leader>ev :e $MYVIMRC<CR>

" Edit UltiSnips for this file
" You must first symlink ~/.vim/UltiSnips to the master snips folder.
nnoremap <leader>es :UltiSnipsEdit<CR>

" Edit theme
" You must first symlink ~/.vim/UltiSnips to the master snips folder.
nnoremap <leader>et :e ~/.vim/colors/evan.vim<CR>

" Re-source vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>

" Puts current file name in the mac paste buffer. Useful for operating on
" the file from the command line.
noremap <D-Y> :CopyTitle<CR><CR>
noremap <Leader>y :CopyTitle<CR><CR>

"Info about the character undernath cursor
nnoremap gi ga

" Toggles paste mode and shows value of the option
nnoremap <F2> :set invpaste paste?<CR>

" Don't accidentally open help when going for F2 or q
noremap <F1> <nop>

noremap <C-S> :%s/

nnoremap <silent> zz @=(foldlevel('.')?'za':'l')<CR>
vnoremap zz zf

"Sparkup to create HTML
" let g:sparkupExecuteMapping = '<c-t>'

" How to create repeatable mappings
" http://vimcasts.org/episodes/creating-repeatable-mappings-with-repeat-vim/
nnoremap <silent> <Plug>TransposeCharacters xp
\:call repeat#set("\<Plug>TransposeCharacters")<CR>
nmap cp <Plug>TransposeCharacters

"Displays the tag type under the cursor. Really useful for generating colors
noremap <c-x> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans <'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Remove the Windows ^M - when the encodings gets messed up
" noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"Change to light bg
" noremap <leader>l :set background=light<cr>:colorscheme solarized<cr>

"Change to dark bg
" noremap <leader>d :set background=dark<cr>:colorscheme evan<cr>

" Convert RSpec should to expect syntax
nnoremap <Leader>cse :call ConvertShouldToExpect()<CR>

""" Autoformat
" See https://black.readthedocs.io/en/stable/editor_integration.html#vim
map <C-B> :Black<cr>
" autocmd BufWritePre *.py execute ':Black'
map <Leader>i :Isort<cr>
let g:vim_isort_map = ''

"" Go Debugger from faith/vim-go
" See https://github.com/fatih/vim-go/blob/master/doc/vim-go.txt#L2299
" See :help GoDebug
" map <Leader>gdr :GoDebugStart . -listen_host localhost:5001 -staging<CR>
" map <Leader><Down> :GoDebugNext<CR>
" map <Leader><Right> :GoDebugStep<CR>
" map <Leader><Up> :GoDebugStepOut<CR>
" map <Leader><Left> :GoDebugBreakpoint<CR>
" map <Leader>c :GoDebugContinue<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""" SETTINGS """"""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on " Turn on filetype after Vundle is setup
colorscheme evan
" colorscheme solarized
syntax enable

set wrap " Wrap lines
set exrc  " Allow per-project vimrc's
set list " Show characters for tabs, spaces, end of line
set ruler " Shows line & column numbers
set number " Turn on line numbers
set secure  " Prevent :autocmd, shell and write commands from being run inside project-specific .vimrc files unless they're owned by me
set smarttab " <Tab> inserts correct number of spaces
set wildmenu " Enhanced tab completion
set autoread " Reload file when a file is changed from the outside
set vb t_vb= " Disables visual bell on term
set hlsearch " Highlight search matches
set showmode " Says whether or not paste mode is turned on or off
set t_Co=256 " Enable colored terminal
let &t_Co=256 " Number of term colors
set linebreak " Wordwrapping doesn't break words in the middle
set incsearch " Incremental search as typing
set smartcase " Will switch to case sensitive if a cap is used
set showmatch " Shows matches on search
set expandtab " Replaces tabs with spaces
set tabstop=2 " Number of spaces that a tab counts for
set ignorecase " Case insensitive search but see next option
set autoindent " Enable automatic alignment during insertions
set noswapfile " Don't use swp files
set smartindent " Tries to recognize code and indent
set matchtime=2 " two-tenths of a second blink
set cmdheight=2 " The commandbar height
set shiftwidth=2 " Number of spaces to use for each (auto)indent
set textwidth=74 " Maximum line length at 74 characters. Trigged with gq
set history=1000 " History length of ':' commands
set laststatus=2 " Always show the status line
set encoding=utf8 " UTF-8 FTW
set shell=/bin/sh " Use bash shell
set guioptions-=T " Removes GUI bars
set guioptions-=l " Removes scrollbars
set guioptions-=r " Removes scrollbars
set guioptions-=b " Removes scrollbars
set colorcolumn=100 " Have a line of at 100 characters.
set pastetoggle=<F2> " Binds F2 to pastetoggling
set clipboard=unnamed " All yank commands now go to mac clipboard
let &t_Sf="\<Esc>[3%dm" " Term foreground color
let &t_Sb="\<Esc>[4%dm" " Term background color
let &t_te="\<Esc>[?47l" " Output of termcap mode
let &t_ti="\<Esc>[?47h" " Term in termcap mode
set backspace+=start,eol,indent " Make backspace work properly on vim
set wildmode=list:longest,full " Bash command line tab completion
set listchars=tab:\|\ ,trail:●,extends:>,precedes:<,nbsp:+

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""" CUSTOM COMMANDS """""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Removes all trailing whitespace
command! Whitespace %s/\s\+$//e

command! CopyTitle !echo "%\c" | pbcopy

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""" LANGUAGE SPECIFIC SETTINGS """""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Coffeescript "
""""""""""""""""
" augroup filetype_coffee
"   autocmd!
"   autocmd BufRead,BufNewFile *.coffee set ft=coffee
" augroup END

" ES6 "
""""""""""""""""
" augroup filetype_es6
"   autocmd!
"   autocmd BufRead,BufNewFile *.es6 set ft=javascript.jsx
" augroup END


" Python "
""""""""""
" Suggesations here: https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/
augroup filetype_python
  autocmd!
  autocmd FileType python setlocal
    \ tabstop=4
    \ softtabstop=4
    \ shiftwidth=4
    \ textwidth=100

  autocmd BufWrite *.py :call DeleteTrailingWS() "Deletes trailing whitepace
  let python_highlight_all = 1
  autocmd FileType python syn keyword pythonDecorator True None False self

  autocmd BufNewFile,BufRead *.jinja setlocal syntax=htmljinja
  autocmd BufNewFile,BufRead *.mako setlocal ft=mako
  autocmd BufNewFile,BufRead *.less setlocal ft=less
augroup END

" HTML "
""""""""
augroup filetype_html
  autocmd!
  autocmd BufRead,BufNewFile *.erb set ft=eruby.html
  autocmd FileType html,eruby.html iabbrev <buffer> --- &mdash;
augroup END

" Bash "
""""""""
augroup filetype_bash
  autocmd!
  autocmd FileType sh set tw=0
augroup END

" Rabl "
""""""""
" augroup filetype_rabl
"   autocmd!
"   autocmd BufRead,BufNewFile *.rabl set ft=ruby
"   autocmd BufRead,BufNewFile *.rabl syn keyword rubyRabl node attribute object child collection attributes glue extends
"   autocmd BufRead,BufNewFile *.rabl hi def link rubyRabl Function
" augroup END

" RSpec "
""""""""
" augroup filetype_rspec
"   autocmd!
"   autocmd BufRead,BufNewFile *_spec.rb syn keyword rubyRspecFn describe context expect is_expected before after shared_examples include_examples it_behaves_like
"   autocmd BufRead,BufNewFile *_spec.rb syn keyword rubyRspecKw it let to to_not subject
"   autocmd BufRead,BufNewFile *_spec.rb hi def link rubyRspecFn Function
"   autocmd BufRead,BufNewFile *_spec.rb hi def link rubyRspecKw Statement
" augroup END

" Markdown "
""""""""""""
augroup filetype_markdown
  autocmd!

  " change inside heading
  autocmd FileType markdown onoremap <buffer> ih :<c-u>execute "normal!?^==\\+$\r:nohlsearch\rkvg_"<cr>

  " change around heading
  autocmd FileType markdown onoremap <buffer> ah :<c-u>execute "normal! ?^==\\+\r:nohlsearch\rg_vk0"<cr>

augroup END

" Vimscript "
"""""""""""""
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""" RUN CURRENT FILE """""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Execute current file
nnoremap <F5> :call ExecuteFile()<CR>

" Will attempt to execute the current file based on the `&filetype`
" You need to manually map the filetypes you use most commonly to the
" correct shell command.
function! ExecuteFile()
  let filetype_to_command = {
  \   'javascript': 'node',
  \   'coffee': 'coffee',
  \   'python': 'python',
  \   'html': 'open',
  \   'sh': 'sh'
  \ }
  let cmd = get(filetype_to_command, &filetype, &filetype)
  call RunShellCommand(cmd." %s
")
endfunction

" Enter any shell command and have the output appear in a new buffer
" For example, to word count the current file:
"
"   :Shell wc %s
"
" Thanks to: http://vim.wikia.com/wiki/Display_output_of_shell_commands_in_new_window
command! -complete=shellcmd -nargs=+ Shell call RunShellCommand(<q-args>)
function! RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""" UTILITY METHODS """""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CurDir()
  let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
  return curdir
endfunction

function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  else
    return ''
  endif
endfunction

function! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

function! VisualSearch(direction) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" Rename current file (thanks Gary Bernhardt)
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

function! ConvertShouldToExpect()
  let rspec_conversions = {
        \ 'should': 'to',
        \ 'should_not': 'not_to',
        \ 'should_receive': 'to receive',
        \ 'should_not_receive': 'not_to receive',
        \ }

  for [old, new] in items(rspec_conversions)
    execute "normal! " . ':%s/\v^(\s+)(.+)\.' . old . '>/\1expect(\2).' . new . '/ge' . "\<CR>"
  endfor
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""" PLUGIN SETTINGS """""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Sparkup "
"""""""""""
let sparkupNextMapping = '<M-e>'

" Searching "
"""""""""""""
" https://github.com/ggreer/the_silver_searcher#vim
" You can use Ag with [ack.vim][] by adding the following line to your .vimrc:
let g:ackprg = 'ag --vimgrep'

" Vim Indent Guides "
"""""""""""""""""""""
let g:indent_guides_auto_colors = 0
augroup indent_guides
  autocmd!
  autocmd BufRead,BufNewFile * IndentGuidesEnable
augroup END

" YouCompleteMe and UltiSnips "
""""""""""""""""""""""""""""""
" " How to integrate UltiSnips and YouCompleteMe
" let g:UltiSnipsExpandTrigger       = "<tab>"
" let g:UltiSnipsJumpForwardTrigger  = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
"
" " Enable tabbing through list of results
" function! g:UltiSnips_Complete()
"     call UltiSnips#ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips#JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"             endif
"         endif
"     endif
"     return ""
" endfunction
"
" au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
"
" " Expand snippet or return
" let g:ulti_expand_res = 0
" function! Ulti_ExpandOrEnter()
"     call UltiSnips#ExpandSnippet()
"     if g:ulti_expand_res
"         return ''
"     else
"         return "\<return>"
" endfunction
"
" " Set <space> as primary trigger
" inoremap <return> <C-R>=Ulti_ExpandOrEnter()<CR>

" Linting "
"""""""""""
" let g:ale_linters = {
" \   'python': ['flake8', 'mypy'],
" \}
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_enter = 0
" let g:airline#extensions#ale#enabled = 1
" let g:ale_python_mypy_options='--ignore-missing-imports --show-error-codes --warn-redundant-casts --warn-unused-ignores'
" " let g:ale_python_flake8_executable='/bin/sh -c "cd $(dirname %) && flake8"'
" " let g:ale_python_mypy_executable='/bin/sh -c "cd $(dirname %) && mypy"'
" " let g:ale_python_mypy_executable='/usr/local/bin/mypy'
" let g:ale_python_mypy_use_global = 1
" let g:ale_python_mypy_change_directory=0

" Ctags + FZF
"""""""""""""
" https://github.com/junegunn/fzf/wiki/Examples-(vim)#jump-to-tags
" function! s:tags_sink(line)
"   let parts = split(a:line, '\t\zs')
"   let excmd = matchstr(parts[2:], '^.*\ze;"\t')
"   execute 'silent e' parts[1][:-2]
"   let [magic, &magic] = [&magic, 0]
"   execute excmd
"   let &magic = magic
" endfunction
" 
" function! s:tags()
"   if empty(tagfiles())
"     echohl WarningMsg
"     echom 'Preparing tags'
"     echohl None
"     call system('ctags -R')
"   endif
" 
"   call fzf#run({
"   \ 'source':  'cat '.join(map(tagfiles(), 'fnamemodify(v:val, ":S")')).
"   \            '| grep -v -a ^!',
"   \ 'options': '+m -d "\t" --with-nth 1,4.. -n 1 --tiebreak=index',
"   \ 'down':    '40%',
"   \ 'sink':    function('s:tags_sink')})
" endfunction
" 
" command! Tags call s:tags()
" 
" " Jump to tags in the current buffer
" " https://github.com/junegunn/fzf/wiki/Examples-(vim)#jump-to-tags-in-the-current-buffer
" function! s:align_lists(lists)
"   let maxes = {}
"   for list in a:lists
"     let i = 0
"     while i < len(list)
"       let maxes[i] = max([get(maxes, i, 0), len(list[i])])
"       let i += 1
"     endwhile
"   endfor
"   for list in a:lists
"     call map(list, "printf('%-'.maxes[v:key].'s', v:val)")
"   endfor
"   return a:lists
" endfunction
" 
" function! s:btags_source()
"   let lines = map(split(system(printf(
"     \ 'ctags -f - --sort=no --excmd=number --language-force=%s %s',
"     \ &filetype, expand('%:S'))), "\n"), 'split(v:val, "\t")')
"   if v:shell_error
"     throw 'failed to extract tags'
"   endif
"   return map(s:align_lists(lines), 'join(v:val, "\t")')
" endfunction
" 
" function! s:btags_sink(line)
"   execute split(a:line, "\t")[2]
" endfunction
" 
" function! s:btags()
"   try
"     call fzf#run({
"     \ 'source':  s:btags_source(),
"     \ 'options': '+m -d "\t" --with-nth 1,4.. -n 1 --tiebreak=index',
"     \ 'down':    '40%',
"     \ 'sink':    function('s:btags_sink')})
"   catch
"     echohl WarningMsg
"     echom v:exception
"     echohl None
"   endtry
" endfunction
" 
" command! BTags call s:btags()

" Airline "
"""""""""""
" let g:airline#extensions#whitespace#checks = [ 'indent' ]
" let g:airline#extensions#fugitive#enabled = 1
" let g:airline_theme_patch_func = 'AirlineThemePatch'
" let g:airline_theme="tomorrow"
" function! AirlineThemePatch(palette)
"   " This is based off of the 'tomorrow' theme with some inspiration from
"   " zenburn
"   let s:IA = airline#themes#get_highlight('NonText')
" 
"   let s:N1 = airline#themes#get_highlight2(['DbgCurrent', 'bg'], ['Folded', 'fg'], 'bold')
"   let s:N2 = airline#themes#get_highlight('Folded')
"   let s:N3 = airline#themes#get_highlight('NonText')
"   let a:palette.normal = airline#themes#generate_color_map(s:N1, s:N2, s:N3)
" 
"   let a:palette.insert.airline_c = s:IA
"   let a:palette.insert.airline_x = s:IA
"   let a:palette.replace.airline_c = s:IA
"   let a:palette.replace.airline_x = s:IA
"   let a:palette.visual.airline_c = s:IA
"   let a:palette.visual.airline_x = s:IA
" 
"   let s:MOD = airline#themes#get_highlight2(['Error','bg'], ['NonText', 'bg'])
"   let a:palette.normal_modified.airline_c = s:MOD
" 
"   let a:palette.inactive = airline#themes#generate_color_map(s:IA, s:IA, s:IA)
" endfunction
